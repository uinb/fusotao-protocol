
//! Autogenerated weights for `pallet_fuso_verifier`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-04-18, STEPS: `1`, REPEAT: 30, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 128

// Executed Command:
// ./target/release/fuso
// benchmark
// --chain
// dev
// --pallet
// pallet-fuso-verifier
// --extrinsic
// *
// --repeat
// 30
// --execution
// wasm
// --wasm-execution
// compiled
// --output
// ./

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use frame_support::weights::constants::RocksDbWeight;
use sp_std::marker::PhantomData;

pub trait WeightInfo {
	fn authorize() -> Weight;
	fn register() -> Weight;
	fn revoke() -> Weight;
	fn launch() -> Weight;
	fn evict() -> Weight;
	fn verify() -> Weight;
	fn stake() -> Weight;
	fn unstake() -> Weight;
	fn claim_shares() -> Weight;
}

/// Weight functions for `pallet_fuso_verifier`.
pub struct FusoWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for FusoWeight<T> {
	// Storage: Verifier Dominators (r:2 w:1)
	fn register() -> Weight {
		(17_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Verifier Dominators (r:1 w:1)
	fn evict() -> Weight {
		(14_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Verifier Dominators (r:1 w:1)
	fn launch() -> Weight {
		(15_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Verifier Dominators (r:1 w:1)
	// Storage: Verifier Stakings (r:1 w:1)
	// Storage: Verifier Reserves (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn stake() -> Weight {
		(38_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	// Storage: Verifier Dominators (r:1 w:1)
	// Storage: Verifier Stakings (r:1 w:1)
	// Storage: Verifier Reserves (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn unstake() -> Weight {
		(43_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	// Storage: Verifier Dominators (r:1 w:0)
	// Storage: Verifier Stakings (r:1 w:1)
	fn claim_shares() -> Weight {
		(14_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Verifier Dominators (r:1 w:0)
	// Storage: Verifier Receipts (r:1 w:1)
	// Storage: Token Balances (r:1 w:1)
	// Storage: Verifier Reserves (r:1 w:1)
	fn authorize() -> Weight {
		(34_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: Verifier Reserves (r:1 w:0)
	// Storage: Verifier Dominators (r:1 w:0)
	// Storage: Verifier Receipts (r:1 w:1)
	fn revoke() -> Weight {
		(25_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Verifier Dominators (r:1 w:1)
	// Storage: Verifier Receipts (r:2 w:2)
	// Storage: Verifier Reserves (r:4 w:6)
	// Storage: Token Tokens (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: Token Balances (r:2 w:2)
	// Storage: Reward Volumes (r:1 w:1)
	// Storage: Reward Rewards (r:2 w:2)
	fn verify() -> Weight {
		(6_669_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(15 as Weight))
			.saturating_add(T::DbWeight::get().writes(16 as Weight))
	}
}

impl WeightInfo for () {

	// Storage: Verifier Dominators (r:2 w:1)
	fn register() -> Weight {
		(17_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Verifier Dominators (r:1 w:1)
	fn evict() -> Weight {
		(14_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}

	// Storage: Verifier Dominators (r:1 w:1)
	fn launch() -> Weight {
		(15_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}

	// Storage: Verifier Dominators (r:1 w:1)
	// Storage: Verifier Stakings (r:1 w:1)
	// Storage: Verifier Reserves (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn stake() -> Weight {
		(38_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	// Storage: Verifier Dominators (r:1 w:1)
	// Storage: Verifier Stakings (r:1 w:1)
	// Storage: Verifier Reserves (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn unstake() -> Weight {
		(43_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	// Storage: Verifier Dominators (r:1 w:0)
	// Storage: Verifier Stakings (r:1 w:1)
	fn claim_shares() -> Weight {
		(14_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Verifier Dominators (r:1 w:0)
	// Storage: Verifier Receipts (r:1 w:1)
	// Storage: Token Balances (r:1 w:1)
	// Storage: Verifier Reserves (r:1 w:1)
	fn authorize() -> Weight {
		(34_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	// Storage: Verifier Reserves (r:1 w:0)
	// Storage: Verifier Dominators (r:1 w:0)
	// Storage: Verifier Receipts (r:1 w:1)
	fn revoke() -> Weight {
		(25_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Verifier Dominators (r:1 w:1)
	// Storage: Verifier Receipts (r:2 w:2)
	// Storage: Verifier Reserves (r:4 w:6)
	// Storage: Token Tokens (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: Token Balances (r:2 w:2)
	// Storage: Reward Volumes (r:1 w:1)
	// Storage: Reward Rewards (r:2 w:2)
	fn verify() -> Weight {
		(6_669_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(15 as Weight))
			.saturating_add(RocksDbWeight::get().writes(16 as Weight))
	}
}